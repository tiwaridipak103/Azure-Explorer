from airflow import settings
from airflow.models import DagModel
from sqlalchemy.orm import sessionmaker
from airflow.models import DagBag
from airflow.api.common.experimental import delete_dag
import pandas as pd

def metadata_active():
    # Create a session to interact with the database
    Session = sessionmaker(bind=settings.engine)
    session = Session()

    # Find the old DAGs that are inactive (is_active = False)
    old_dags = session.query(DagModel).filter(DagModel.is_active == False).all()

    # Iterate through the results and activate the DAGs
    for dag in old_dags:
        dag.is_active = True  # Set is_active to True
        dag.is_paused = False  # Unpause the DAG to allow execution
        # You may also want to check for subdags if required
        # dag.is_subdag = True

        # Commit the changes for each DAG
        session.commit()

    # Close the session
    session.close()

    # Optionally, force a DAG run for each activated DAG if immediate execution is required
    dag_bag = DagBag()
    for dag_id in [dag.dag_id for dag in old_dags]:
        dag = dag_bag.get_dag(dag_id)
        if dag:
            dag.create_dagrun(
                state='running',  # Sets the DAG run to a running state
                execution_date=timezone.utcnow(),
                run_id='manual__' + timezone.utcnow().isoformat(),
                conf={},  # Additional configuration if needed
                external_trigger=True  # Mark this run as triggered manually
            )

if __name__ == '__main__':
    metadata_active()
