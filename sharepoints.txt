from airflow import DAG
from airflow.operators.dummy_operator import DummyOperator
from airflow.sensors.filesystem import FileSensor
from datetime import datetime, timedelta


import os
from airflow.sensors.base import BaseSensorOperator
from airflow.utils.decorators import apply_defaults

class FileModificationSensor(BaseSensorOperator):
    @apply_defaults
    def __init__(self, filepath, previous_mtime=None, *args, **kwargs):
        super(FileModificationSensor, self).__init__(*args, **kwargs)
        self.filepath = filepath
        self.previous_mtime = previous_mtime

    def poke(self, context):
        if not os.path.exists(self.filepath):
            return False
        current_mtime = os.path.getmtime(self.filepath)
        if self.previous_mtime is None:
            self.previous_mtime = current_mtime
            return False
        if current_mtime > self.previous_mtime:
            self.previous_mtime = current_mtime
            return True
        return False


default_args = {
    'owner': 'airflow',
    'depends_on_past': False,
    'start_date': datetime(2024, 1, 1),
    'email_on_failure': False,
    'email_on_retry': False,
    'retries': 1,
    'retry_delay': timedelta(minutes=5),
}

dag = DAG(
    'file_triggered_dag',
    default_args=default_args,
    description='A DAG that triggers on new file updates in a folder',
    schedule_interval=None,  # Set to None since it will be triggered by the sensor
    catchup=False,
)

start_task = DummyOperator(
    task_id='start_task',
    dag=dag,
)

# FileSensor to monitor the directory
file_sensor_task = FileSensor(
    task_id='file_sensor_task',
    filepath='/path/to/your/folder/*.csv',  # Replace with your directory and file pattern
    fs_conn_id='fs_default',
    poke_interval=10,  # Interval to check for the file
    timeout=600,  # Timeout after 10 minutes if file is not found
    dag=dag,
)

process_file_task = DummyOperator(
    task_id='process_file_task',
    dag=dag,
)

start_task >> file_sensor_task >> process_file_task


#!/bin/bash

# Directory to watch
WATCHED_DIR="/path/to/your/folder"

# File to watch
WATCHED_FILE="yourfile.csv"

# Time interval for checking in seconds
CHECK_INTERVAL=10

# Time to keep looking for changes (in seconds)
WATCH_DURATION=300  # 5 minutes

# Initialize the previous file modification time
PREV_MOD_TIME=$(stat -c %Y "$WATCHED_DIR/$WATCHED_FILE" 2>/dev/null)

# Function to check for file modification
check_for_modification() {
  CURRENT_MOD_TIME=$(stat -c %Y "$WATCHED_DIR/$WATCHED_FILE" 2>/dev/null)
  
  if [ "$CURRENT_MOD_TIME" != "$PREV_MOD_TIME" ]; then
    echo "File change detected: $WATCHED_FILE"
    PREV_MOD_TIME="$CURRENT_MOD_TIME"
  fi
}

# Main loop
START_TIME=$(date +%s)

while true; do
  check_for_modification
  sleep $CHECK_INTERVAL
  
  # Check if the watch duration has been exceeded
  CURRENT_TIME=$(date +%s)
  ELAPSED_TIME=$((CURRENT_TIME - START_TIME))
  
  if [ $ELAPSED_TIME -ge $WATCH_DURATION ]; then
    echo "No changes detected in $WATCHED_FILE within the last 5 minutes. Exiting."
    break
  fi
done
