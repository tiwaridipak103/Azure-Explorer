import pandas as pd
import os

# Paths to your source CSV and backup CSV
source_csv_path = 'source_file.csv'
backup_csv_path = 'backup_file.csv'

def update_backup(source_path, backup_path):
    # Check if the backup CSV exists
    if os.path.exists(backup_path):
        # Load both source and backup CSVs into DataFrames
        source_df = pd.read_csv(source_path)
        backup_df = pd.read_csv(backup_path)
        
        # Merge the two DataFrames on a unique identifier column (e.g., 'id')
        # If you don't have a unique identifier, use index or create one
        merged_df = pd.merge(source_df, backup_df, how='outer', on='id', indicator=True)
        
        # Identify Inserts (new rows in source)
        inserts = merged_df[merged_df['_merge'] == 'left_only'].drop('_merge', axis=1)
        
        # Identify Deletes (rows that exist in backup but not in source)
        deletes = merged_df[merged_df['_merge'] == 'right_only']['id'].tolist()
        
        # Identify Updates (rows that exist in both but have different data)
        updates = merged_df[merged_df['_merge'] == 'both']
        updates = updates[source_df.columns]  # Only keep columns from the source
        
        # Apply updates to backup
        for idx, row in updates.iterrows():
            backup_df.loc[backup_df['id'] == row['id'], :] = row
        
        # Add new records to the backup
        if not inserts.empty:
            backup_df = pd.concat([backup_df, inserts], ignore_index=True)
        
        # Remove deleted records from the backup
        if deletes:
            backup_df = backup_df[~backup_df['id'].isin(deletes)]
        
        # Save the updated backup
        backup_df.to_csv(backup_path, index=False)
        print("Backup updated successfully.")
    else:
        # If the backup file does not exist, create a new backup with the current source CSV
        pd.read_csv(source_path).to_csv(backup_path, index=False)
        print("Backup created for the first time.")

# Run the function
update_backup(source_csv_path, backup_csv_path)
