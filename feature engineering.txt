import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from matplotlib import colors

# Example correlation dataframe
# Replace this with your actual dataframe
df = pd.DataFrame(np.random.rand(8, 8), columns=list('ABCDEFGH'))

# Calculate correlation matrix
corr = df.corr()

# Custom function to map colors based on conditions
def custom_colormap(value):
    if value > 0.8:
        return '#33cc33'  # Green for values > 0.8
    else:
        return '#0099ff'  # Blue for other values

# Create the heatmap
plt.figure(figsize=(10, 8))
plt.imshow(corr, cmap='coolwarm', vmin=-1, vmax=1)

# Annotate the heatmap with correlation values and custom colors
for i in range(corr.shape[0]):
    for j in range(corr.shape[1]):
        value = corr.values[i, j]
        color = custom_colormap(value)
        plt.annotate(f"{value:.2f}", xy=(j, i), ha='center', va='center', color=color)

# Add a colorbar
cbar = plt.colorbar(ticks=[-1, 0, 1])
cbar.ax.set_yticklabels(['-1', '0', '1'])
cbar.set_label("Correlation Coefficient", rotation=270, labelpad=20)

# Set plot title
plt.title("Correlation Heatmap with Custom Colors")

# Set x-axis and y-axis labels
plt.xticks(ticks=np.arange(corr.shape[1]), labels=corr.columns, rotation=45, ha='right')
plt.yticks(ticks=np.arange(corr.shape[0]), labels=corr.index)

# Adjust layout for better label visibility
plt.tight_layout()

# Display the plot
plt.show()


===============================================================================================

from numpy.polynomial.polynomial import Polynomial
from sklearn.metrics import mean_squared_error

degrees = [1, 2, 3, 4]  # Test for various degrees
for degree in degrees:
    poly = Polynomial.fit(X, y, degree)
    y_pred = poly(X)
    mse = mean_squared_error(y, y_pred)
    print(f'Degree {degree}, MSE: {mse}')


import numpy as np
from scipy.optimize import curve_fit

# Define an exponential function
def exponential_func(x, a, b):
    return a * np.exp(b * x)

params, _ = curve_fit(exponential_func, X, y)
y_pred = exponential_func(X, *params)
mse = mean_squared_error(y, y_pred)
print(f'Exponential Model, MSE: {mse}')


from sklearn.model_selection import cross_val_score
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import PolynomialFeatures
from sklearn.pipeline import make_pipeline

degree = 2  # Example for quadratic
model = make_pipeline(PolynomialFeatures(degree), LinearRegression())
scores = cross_val_score(model, X, y, scoring='neg_mean_squared_error', cv=5)
print(f'Cross-validated MSE for degree {degree}: {-scores.mean()}')

============================================================================================

# Example using Pandas DataFrame
df = pd.DataFrame({"Date": date_range, "Value": values})

# Plot directly from DataFrame
df.plot(x="Date", y="Value", figsize=(10, 6))

# Format x-axis to show only the year
plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%Y'))
plt.gca().xaxis.set_major_locator(mdates.YearLocator())

plt.xlabel("Year")
plt.ylabel("Values")
plt.title("Pandas Plot with Year-Only X-Axis Labels")
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()



